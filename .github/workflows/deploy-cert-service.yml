name: Deploy Certificate Service

on:
  push:
    branches: [ main ]
    paths: [ 'cert-service/**' ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: makerspace-cert-service
  RESOURCE_GROUP: makerspace-rg

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: cert-service/package-lock.json

    - name: Install dependencies
      working-directory: ./cert-service
      run: npm ci

    - name: Build TypeScript
      working-directory: ./cert-service
      run: npm run build

    - name: Run tests
      working-directory: ./cert-service
      run: npm test
      continue-on-error: true

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get infrastructure outputs
      id: infrastructure
      run: |
        OUTPUTS=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name "main" \
          --query "properties.outputs" \
          --output json)
        
        ACR_NAME=$(echo $OUTPUTS | jq -r '.containerRegistryName.value')
        APP_SERVICE_NAME=$(echo $OUTPUTS | jq -r '.appServiceName.value')
        
        echo "acr-name=$ACR_NAME" >> $GITHUB_OUTPUT
        echo "app-service-name=$APP_SERVICE_NAME" >> $GITHUB_OUTPUT

    - name: Login to Azure Container Registry
      run: az acr login --name ${{ steps.infrastructure.outputs.acr-name }}

    - name: Build and push Docker image
      working-directory: ./cert-service
      run: |
        IMAGE_TAG="${{ github.sha }}"
        FULL_IMAGE_NAME="${{ steps.infrastructure.outputs.acr-name }}.azurecr.io/cert-service:${IMAGE_TAG}"
        LATEST_IMAGE_NAME="${{ steps.infrastructure.outputs.acr-name }}.azurecr.io/cert-service:latest"
        
        docker build -t $FULL_IMAGE_NAME -t $LATEST_IMAGE_NAME .
        docker push $FULL_IMAGE_NAME
        docker push $LATEST_IMAGE_NAME
        
        echo "IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV

    - name: Deploy to Azure App Service
      run: |
        az webapp config container set \
          --name ${{ steps.infrastructure.outputs.app-service-name }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.IMAGE_NAME }}
        
        az webapp restart \
          --name ${{ steps.infrastructure.outputs.app-service-name }} \
          --resource-group ${{ env.RESOURCE_GROUP }}

    - name: Verify deployment
      run: |
        APP_URL=$(az webapp show \
          --name ${{ steps.infrastructure.outputs.app-service-name }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "defaultHostName" \
          --output tsv)
        
        echo "Deployment complete!"
        echo "App Service URL: https://$APP_URL"
        
        # Wait for service to be ready
        sleep 30
        
        # Health check
        curl -f "https://$APP_URL/health" || exit 1
        echo "Health check passed!"
